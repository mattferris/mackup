#!/bin/sh
PATH=/bin:/sbin:/usr/bin:/usr/sbin

if [ -z "$MACKUP_ENVPATH" ]; then
    MACKUP_ENVPATH="./control/env"
fi

# See mackup(8) for more information

if [ -z "$1" ]; then
    echo "usage: $(basename $0) dir"
    exit 1
fi

echo "starting up"

# make sure the backup directory exists
dir=$1
if [ ! -d "$dir" ]; then
    echo "error: $dir doesn't exist"
    exit 1
fi

echo "working directory is $PWD"

#
# %a abbreviated weekday name (Mon, Tue, ...)
# %b abbreviated month name (Jan, Feb, ...)
# %d day of month
#
targets=$( echo daily $(date +'%a %d' | awk '{print tolower($0)}') )

# inject 'monthly' and month name targets if first day of the month
if [ $(date +'%d') = "01" ]; then
    targets="$targets monthly $(date +'%b' | awk '{print tolower($0)}')"
fi

# inject 'annually' target if first day of the year
if [ $(date +'%j') = "001" ]; then
    targets="$targets annually"
fi

#
# mail alert
#
doalert() {
    if [ ! -z $(which mail) ]; then
        email=$(whoami)
        if [ ! -z "$MACKUP_MAILTO" ]; then
            email="$MACKUP_MAILTO"
        fi
        subject="mackup: run script failed"
        echo $1 | mail -s $subject $email
    fi
}

#
# process env dir
#
doenv() {
    envlist=""
    for envdir in $MACKUP_ENVPATH; do
        if [ -d "$envdir" ]; then
            for var in $(ls -1 "$envdir"); do
                val=$(head -n1 "$envdir/$var")
                envlist="$envlist $var=$(head -n1 "$envdir/$var")"
            done
        fi
    done
    echo $envlist
}

#
# process a target
#
dodir() {
    tpath=$1
    tname=$(basename $1)

    echo "starting target $tname"

    cd "$tpath"

    # does target/control/sources exist?
    srcpath="./control/sources";
    if [ ! -f "$srcpath" ]; then
        echo "target $tname: error: no sources for $tpath, $srcpath doesn't exist"
        exit 1
    fi

    # does target/control/run exist?
    runpath="./control/run"
    if [ ! -f "$runpath" ]; then
        echo "target $tname: error: no run script for $tpath, $runpath doesn't exist "
        exit 1
    fi

    echo "target $tname: using sources in $srcpath"

    skiptarget=0

    # prepare environment variables for pre/run/post scripts
    runenv=$(doenv)
    echo "target $tname: compiling environment from envpath ($MACKUP_ENVPATH) producing ($runenv )"

    # process each listed source
    for source in $(cat $srcpath | grep -v ^#); do
        skipsource=0

        echo "target $tname: starting source $source"

        # handle prerun scripts
        if [ -d "./control/pre.d" ]; then
            echo "target $tname: source $source: running prerun scripts in control/pre.d"
            for pre in $(find "./control/pre.d" -type f -perm /u+x,g+x); do
                shortpre=$(basename $pre)
                echo "target $tname: source $source: prerun: running $shortpre"

                ( env $runenv "$pre" "$source" 2>&1 1>/dev/null; exit $? )

                retcode=$?
                if [ $retcode = 255 ]; then
                    # skip source
                    echo "target $tname: source $source: prerun: $shortpre: returned with code $retcode, skipping source"
                    skipsource=1
                elif [ $retcode = 254 ]; then
                    # skip target
                    echo "target $tname: source $source: prerun: $shortpre: returned with code $retcode, skipping target"
                    skiptarget=1
                elif [ ! $retcode = 0 ]; then
                    # log error, continue to backup source
                    echo "target $tname: source $source: prerun: $shortpre: failed, returned with code $retcode, continuing with source"
                    doalert "$tpath/control/pre.d/$shortpre failed, returned with code $retcode"
                fi 

                echo "target $tname: source $source: prerun: finished $shortpre"
            done
            echo "target $tname: source $source: finished prerun scripts"
        fi

        # skip target or source
        if [ $skiptarget = 1 ]; then
            skiptarget=0
            skipsource=0
            echo "target $tname: skipping source $source"
            echo "target $tname: skipping target $target"
            return
        elif [ $skipsource = 1 ]; then
            skipsource=0
            echo "target $tname: skipping source $source"
            continue
        fi

        echo "target $tname: source $source: running $runpath $source"

        # run the backup command
        (
            if [ ! -d /data ]; then
                mkdir ./data
            fi

            cd ./data

            env $runenv "../$runpath" "$source" 2>&1

            retcode=$?
            if [ ! $retcode = 0 ]; then
                echo "error: script failed, returned with code $retcode"
                doalert $(printf '%s\n\n%s\n%s\n%s\n\n%s\n\n%s' \
                    "Run script failed, returned with code $retcode" \
                    "Host:   $(hostname -f)" \
                    "Target: $tpath" \
                    "Source: $source" \
                    "Script environment:" \
                    "$(env)")
            fi
        ) \
        | while read in; do echo "target $tname: source $source: run: $in"; done

        echo "target $tname: source $source: finished $runpath"

        # handle postrun scripts
        if [ -d "./control/post.d" ]; then
            echo "target $tname: source $source: running postrun scripts in control/post.d"
            for post in $(find "./control/post.d" -type f -perm /u+x,g+x); do
                shortpost=$(basename $post)
                echo "target $tname: source $source: postrun: running $shortpost"

                ( env $runenv "$post" "$source" 2>&1 1>/dev/null; exit $? )

                retcode=$?
                if [ ! $retcode = 0 ]; then
                    echo "target $tname: source $source: postrun: $shortpost: failed, returned with code $?"
                    doalert "$tpath/control/post.d/$shortpost failed, returned with code $retcode"
                fi 

                echo "target $tname: source $source: postrun: finished $shortpost"
            done
            echo "target $tname: source $source: finished postrun scripts"
        fi

        echo "target $tname: finished source $source"

    done

    echo "target $tname: no more sources"
    echo "finished target $tname"
}

echo "using targets ($targets)"

#
# loop through the list of targets and process them if they exist
#
found=0
for target in $targets; do
    if [ -d "$dir/$target" ]; then
        dodir "$dir/$target"
        found=1
    fi
done

if [ ! $found = 1 ]; then
    echo "error: no matching targets found ($targets) in $dir"
fi

echo "shutting down"
